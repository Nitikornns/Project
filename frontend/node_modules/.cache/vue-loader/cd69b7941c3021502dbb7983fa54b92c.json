{"remainingRequest":"E:\\project\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\frontend\\src\\components\\Register.vue?vue&type=template&id=7bf3755a&","dependencies":[{"path":"E:\\project\\frontend\\src\\components\\Register.vue","mtime":1609714817271},{"path":"E:\\project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\project\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\project\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\project\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}